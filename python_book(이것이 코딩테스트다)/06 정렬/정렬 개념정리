정렬: 데이터를 특정한 기준에 따라서 순서대로 나열하는것을 말한다.
이진탐색의 전처리 과정이기도 하다.

*** 사실 그냥 내장 함수가 젤 빠름 -> 특정 조건 '계수 정렬' 제외
그럼에도 나오는 유형 3가지
1. 정렬 라이브러리로 풀수 있는 문제
 - 단순히 정렬 라이브러리 사용할줄 아는지
 튜플 람다식 정렬 array = sorted(array, key= lamda student: student[0])
2. 정렬 알고리즘의 원리에 대해서 물어보는 문제
 - 선택, 삽입, 퀵 정렬 등의 원리를 알고 있어야 풀수 있는 문제
3. 더 빠른 정렬이 필요한 문제
4. 정렬이 유지되는 리스트에 pop push을 여러번 해야하는 경우 -> heapq 발상


*** lambda 정렬 방법 예시
L.sort(key=lambda x: x[1], (-x[2]), x[3])
L의 원소의 1자리부터 정렬(오름차순) / 같은경우에는 2자리 기준 내림차순
중요한게 내림차순으로 줄때 괄호로 묶은 다음에 -넣어줘야함 -> 잘못된 방식 그냥 -int(a)는 불가능한 표현 -(int(a))랑 헷갈
알아서 인트형이면 그냥 -x[1] 써도 될꺼임


선택정렬 O(N^2) 별로임
 - 그래도 특정 리스트에서 가장 작은 데이터를 찾는일등 '간단하게 사용'
삽입 정렬 O(N^2) 지만 최선의 경우 거의 O(N)
 - 퀵정렬보단 느리지만 데이터가 '거의 정렬되어' 있다면 강력한 실행속도를 가짐.
계수정렬 데이터중 '최댓값이 K'일때 O(N+K)  "가장 낮은 값과 큰값의 차이가 백만 이하일때 효과적"
 - 특정한 조건이 부합할 때만 사용가능하지만 매우 빠름
    - '데이터의 크기 범위가 제한된 정수'의 경우 사용가능
 - 기수정렬과 더불어 가장 빠름, 기수정렬이 범위 더크게 가능하고 더 어려움
퀵정렬 O(NlogN)
 - 사실상 제일 빠른, 많이 쓰이는 정렬 알고리즘
 - 삽입정렬과 반대로 거의 정렬되어 있는경우에 최악의 O(N^2)시간 복잡도를 가진다.

퀵 정렬 과정
 1) 데이터 갯수가 1개인 경우 종료(start >= end)
 2) pivot = start, left = start + 1, right = end 으로 초기화
 3) pivot 보다 큰 left, 작은 right 찾기    - left <= right: left right 교환 3)반복
                         ***암기         - left > right: right pivot 교환  4)로
 4) pivot의 왼쪽과 오른쪽 배열 각각 1번으로

예제
def quick_sort(L, start, end):
    # 1)
    if start >= end:
        return
    # 2)
    pivot = start
    left = start + 1
    right = end
    # 탈출 조건은 뭔 개짓을 해도 left < right 인 경우에 탈출함
    # right 는 start ~ end 값이고 left는 최대값이 start ~ end + 1로 만들어서 어떤경우던 탈출하긴함
    # 위 경우 탈출해도 상관없긴한데 직관적이 풀이를 하자
    while left <= right:
        # 3)
        while left <= end and L[left] <= L[pivot]: # [4, 3]의 경우 left, right가 1에서 고정됨으로 left을 end + 1값이 될수 있드록
            left += 1
        # 3)
        while right > start and L[right] >= L[pivot]:
            right -= 1
        # 3) left <= right 3번 반복
        if left <= right: # left 와 right 값 교환
            L[left], L[right] = L[right], L[left]
        # 3) left > right 탈출후 4번으로
        else: # left > right 인경우 right 와 pivot 교환
            L[right], L[pivot] = L[pivot], L[right]
        print(left, right)
    # 4) right가 pivot 값인것을 기억
    quick_sort(L, start, right - 1)
    quick_sort(L, right + 1, end)

위의 어려운 코드랑 차원이 다른 직관적인 파이썬의 퀵정렬 코드
def quick_sort(list):
    if len(list) <= 1: return list
    pivot = list[len(list)//2]
    less_arr, equal_arr, big_arr = [], [], []
    for i in list:
        if i < pivot:
            less_arr.append(i)
        elif i == pivot:
            equal_arr.append(i)
        elif i > pivot:
            big_arr.append(i)
    return quick_sort(less_arr) + equal_arr + quick_sort(big_arr)


