정렬: 데이터를 특정한 기준에 따라서 순서대로 나열하는것을 말한다.
이진탐색의 전처리 과정이기도 하다.
*** 사실 그냥 내장 함수가 젤 빠름 -> 특정 조건 계수 정렬 제외
그럼에도 나오는 유형 3가지
1. 정렬 라이브러리로 풀수 있는 문제
 - 단순히 정렬 라이브러리 사용할줄 아는지
 튜플 람다식 정렬 array = sorted(array, key= lamda student: student[0])
2. 정렬 알고리즘의 원리에 대해서 물어보는 문제
 - 선택, 삽입, 퀵 정렬 등의 원리를 알고 있어야 풀수 있는 문제
3. 더 빠른 정렬이 필요한 문제



선택정렬 O(N^2) 별로임
 - 그래도 특정 리스트에서 가장 작은 데이터를 찾는일등 간단하게 사용
삽입 정렬 O(N^2) 지만 최선의 경우 거의 O(N)
 - 퀵정렬보단 느리지만 데이터가 거의 정렬되어 있다면 강력한 실행속도를 가짐.
계수정렬 데이터중 최댓값이 K일때 O(N+K)
 - 특정한 조건이 부합할 때만 사용가능하지만 매우 빠름
    - 데이터의 크기 범위가 제한된 정수의 경우 사용가능
 - 기수정렬과 더불어 가장 빠름, 기수정렬이 범위 더크게 가능하고 더 어려움
퀵정렬 O(NlogN)
 - 사실상 제일 빠른, 많이 쓰이는 정렬 알고리즘
 - 삽입정렬과 반대로 거의 정렬되어 있는경우에 최악의 O(N^2)시간 복잡도를 가진다.

퀵 정렬 과정
 1) 데이터 갯수가 1개인 경우 종료(start >= end)
 2) pivot = start, left = start + 1, right = end 으로 초기화
 3) pivot 보다 큰 left, 작은 right 찾기    - left <= right: left right 교환 3)반복
                                        - left > right: right pivot 교환  4)로
 4) pivot의 왼쪽과 오른쪽 배열 각각 1번으로

예제
 def quick_sort(L, start, end):
    # 1)
    if start >= end:
        return
    # 2)
    pivot = start
    left = start + 1
    right = end
    while left <= right:
        # 3)
        while left <= end and L[left] <= L[pivot]:
            left += 1
        # 3)
        while right > start and L[right] >= L[pivot]:
            right -= 1
        # 3) left <= right 3번 반복
        if left <= right:
            L[left], L[right] = L[right], L[left]
        # 3) left > right 탈출후 4번으로
        else:
            L[right], L[pivot], L[pivot], L[right]
    # 4) right가 pivot 값인것을 기억
    quick_sort(L, start, right - 1)
    quick_sort(L, right + 1, end)


