발상방법:
- 점화식을 이용한 풀이? -> 재귀적 풀이가 필요한 탑다운인지, 처음부터 풀이하는 보텀업인지 + 메모리제이션 사용
- 그리디 문제냐? -> 지금 선택이 나중에 영향을 줘서 아니다 -> 다이나믹(점화식) 발상

ex) 피보나치
- 탑다운의 경우 fibo가 재귀 함수일때 fibo(100)함수 호출 -> return fibo(99) + fibo(98)
처럼 100을 해결하기위해 99 98 97 등 아래로의 호출을 하는 방식으로 보통 재귀적 사용
- 바텀업일 경우 i = (3, .... N) fibo(i) = fibo(i-1) + fibo(i-2) 반복처럼
3 구하고 4..... N 구하는 방식으로 보통 반복문으로 풀이

다이나믹 프로그래밍 조건
1. 큰문제를 작은 문제로 나눌수 있다.
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일 하다.
--> 점화식 풀이로 생각 + 메모리 제이션
 An = min(An-1,An//2,An//3,A//5) + 1 같은 방식 풀이


좋은 예시 -> 피보나치수열 구할때 f(6)등의 값을 저장해서 쓰기
 - 메모리 제이션: 한번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를
 그대로 가져오는 기법을 의미하며, 캐싱이라고도 부른다.

 분할 정복 vs 다이나믹 프로그래밍의 차이점은 다이나믹은 문제들이 서로 영향을 미친다.
 퀵 정렬을 예시로, 전에 구했던값이 다음에 영향을 주지않는다.
 그러나 다이나믹 프로그래밍은 한번 해결했던 문제를 다시금 해결한다는 점이 있다.
 그렇기에 이미 해결된 부분 문제에 대한 답을 저장해 놓고, 이 문제는 이미 해결이 됐던 것이니깐 다시 해결할 필요가 없다.
 고 반환 하는것이다.

 문제를 푸는 첫번째 단계는 주어진 문제가 다이나믹 프로그래밍 유형임을파악하는것이다.
 특정 문제를 완전 탐색 알고리즘으로 접근했을 때 시간이 매우 오래 걸리면 다이나믹 프로그래밍을 적용할수 있는지
 해결하고자 하는 부분문제들의 중복 여부를 확인해보자.

 또한 재귀적인 풀이보단 반복문을 이용한 풀이를 이용하자.
 파이썬은 재귀의 한계가 있는데 이를 sys 라이브러리를 이용해서 풀수있는데 삼성 sw는 sys 라이브러리 사용 불가능이다.
